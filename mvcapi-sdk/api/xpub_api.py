"""
    MicrovisionChain API Document

    API definition for MicrovisionChain provided apis  # noqa: E501

    The version of the OpenAPI document: 3.0.8
    Contact: heqiming@mvcapi.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from mvcapi-sdk.api_client import ApiClient, Endpoint
from mvcapi-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from mvcapi-sdk.model.error_response import ErrorResponse
from mvcapi-sdk.model.xpub_address import XpubAddress
from mvcapi-sdk.model.xpub_lite_balance import XpubLiteBalance
from mvcapi-sdk.model.xpub_utxo import XpubUtxo


class XpubApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __xpub_lite_xpub_address_address_get(
            self,
            xpub,
            address,
            **kwargs
        ):
            """Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.xpub_lite_xpub_address_address_get(xpub, address, async_req=True)
            >>> result = thread.get()

            Args:
                xpub (str): the requested xpub
                address (str): the requested address

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                XpubAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['xpub'] = \
                xpub
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.xpub_lite_xpub_address_address_get = Endpoint(
            settings={
                'response_type': (XpubAddress,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/xpubLite/{xpub}/address/{address}',
                'operation_id': 'xpub_lite_xpub_address_address_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'xpub',
                    'address',
                ],
                'required': [
                    'xpub',
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'xpub':
                        (str,),
                    'address':
                        (str,),
                },
                'attribute_map': {
                    'xpub': 'xpub',
                    'address': 'address',
                },
                'location_map': {
                    'xpub': 'path',
                    'address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__xpub_lite_xpub_address_address_get
        )

        def __xpub_lite_xpub_balance_get(
            self,
            xpub,
            **kwargs
        ):
            """Get xpub balances including confirmed and unconfirmed.  # noqa: E501

            This api returns confirmed balance(same as address balance), not sumed utxos.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.xpub_lite_xpub_balance_get(xpub, async_req=True)
            >>> result = thread.get()

            Args:
                xpub (str): the xpub to search

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                XpubLiteBalance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['xpub'] = \
                xpub
            return self.call_with_http_info(**kwargs)

        self.xpub_lite_xpub_balance_get = Endpoint(
            settings={
                'response_type': (XpubLiteBalance,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/xpubLite/{xpub}/balance',
                'operation_id': 'xpub_lite_xpub_balance_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'xpub',
                ],
                'required': [
                    'xpub',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'xpub':
                        (str,),
                },
                'attribute_map': {
                    'xpub': 'xpub',
                },
                'location_map': {
                    'xpub': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__xpub_lite_xpub_balance_get
        )

        def __xpub_lite_xpub_utxo_get(
            self,
            xpub,
            **kwargs
        ):
            """Get xpub utxos by specific xpub(300 per page).  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.xpub_lite_xpub_utxo_get(xpub, async_req=True)
            >>> result = thread.get()

            Args:
                xpub (str): the requested xpub

            Keyword Args:
                limit (int): The max items returned in this query(default 300), not bigger than 5000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [XpubUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['xpub'] = \
                xpub
            return self.call_with_http_info(**kwargs)

        self.xpub_lite_xpub_utxo_get = Endpoint(
            settings={
                'response_type': ([XpubUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/xpubLite/{xpub}/utxo',
                'operation_id': 'xpub_lite_xpub_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'xpub',
                    'limit',
                ],
                'required': [
                    'xpub',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'xpub':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'xpub': 'xpub',
                    'limit': 'limit',
                },
                'location_map': {
                    'xpub': 'path',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__xpub_lite_xpub_utxo_get
        )
