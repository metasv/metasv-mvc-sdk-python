"""
    MetaSV API Spec

    API definition for MetaSV provided apis  # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Contact: heqiming@metasv.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from metasv_mvc_client.api_client import ApiClient, Endpoint
from metasv_mvc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from metasv_mvc_client.model.broadcast_result import BroadcastResult
from metasv_mvc_client.model.output_info_detail import OutputInfoDetail
from metasv_mvc_client.model.tx_detail import TxDetail
from metasv_mvc_client.model.tx_raw import TxRaw


class TxApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __tx_broadcast_post(
            self,
            **kwargs
        ):
            """Broadcast tx to metasv fullnode.  # noqa: E501

            This api will broadcast to metasv fullnode directly.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tx_broadcast_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                tx_raw (TxRaw): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BroadcastResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.tx_broadcast_post = Endpoint(
            settings={
                'response_type': (BroadcastResult,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/tx/broadcast',
                'operation_id': 'tx_broadcast_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tx_raw',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tx_raw':
                        (TxRaw,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'tx_raw': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__tx_broadcast_post
        )

        def __tx_txid_get(
            self,
            txid,
            **kwargs
        ):
            """Get transaction detail by specific txid.  # noqa: E501

            This api is parsed from raw hex, you can use /tx/{txid}/raw to parse tx by yourself, If you want detail input info, use '/vin/{txid}' to get detailed input info including address and value.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tx_txid_get(txid, async_req=True)
            >>> result = thread.get()

            Args:
                txid (str): the request ID to search, txhash

            Keyword Args:
                show_script (bool): Return source script code or not (default false).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TxDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['txid'] = \
                txid
            return self.call_with_http_info(**kwargs)

        self.tx_txid_get = Endpoint(
            settings={
                'response_type': (TxDetail,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/tx/{txid}',
                'operation_id': 'tx_txid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'txid',
                    'show_script',
                ],
                'required': [
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'txid':
                        (str,),
                    'show_script':
                        (bool,),
                },
                'attribute_map': {
                    'txid': 'txid',
                    'show_script': 'showScript',
                },
                'location_map': {
                    'txid': 'path',
                    'show_script': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tx_txid_get
        )

        def __tx_txid_raw_get(
            self,
            txid,
            **kwargs
        ):
            """Get transaction raw hex by specific txid.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tx_txid_raw_get(txid, async_req=True)
            >>> result = thread.get()

            Args:
                txid (str): the request ID to search, txhash

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TxRaw
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['txid'] = \
                txid
            return self.call_with_http_info(**kwargs)

        self.tx_txid_raw_get = Endpoint(
            settings={
                'response_type': (TxRaw,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/tx/{txid}/raw',
                'operation_id': 'tx_txid_raw_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'txid',
                ],
                'required': [
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'txid':
                        (str,),
                },
                'attribute_map': {
                    'txid': 'txid',
                },
                'location_map': {
                    'txid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tx_txid_raw_get
        )

        def __tx_txid_seen_get(
            self,
            txid,
            **kwargs
        ):
            """Whether MetaSV have seen this tx before. This is a fast approach to know if the tx exist or not.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tx_txid_seen_get(txid, async_req=True)
            >>> result = thread.get()

            Args:
                txid (str): the request ID to search, txhash

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['txid'] = \
                txid
            return self.call_with_http_info(**kwargs)

        self.tx_txid_seen_get = Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/tx/{txid}/seen',
                'operation_id': 'tx_txid_seen_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'txid',
                ],
                'required': [
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'txid':
                        (str,),
                },
                'attribute_map': {
                    'txid': 'txid',
                },
                'location_map': {
                    'txid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tx_txid_seen_get
        )

        def __vin_txid_detail_get(
            self,
            txid,
            **kwargs
        ):
            """Get all output point of vins in the tx with detailed output script.  # noqa: E501

            Search output points by spent txid. Use this api to get detailed inputs for the tx.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.vin_txid_detail_get(txid, async_req=True)
            >>> result = thread.get()

            Args:
                txid (str): The txid of the vins

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OutputInfoDetail]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['txid'] = \
                txid
            return self.call_with_http_info(**kwargs)

        self.vin_txid_detail_get = Endpoint(
            settings={
                'response_type': ([OutputInfoDetail],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/vin/{txid}/detail',
                'operation_id': 'vin_txid_detail_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'txid',
                ],
                'required': [
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'txid':
                        (str,),
                },
                'attribute_map': {
                    'txid': 'txid',
                },
                'location_map': {
                    'txid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__vin_txid_detail_get
        )
