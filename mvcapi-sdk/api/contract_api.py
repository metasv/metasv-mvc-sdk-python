"""
    MicrovisionChain API Document

    API definition for MicrovisionChain provided apis  # noqa: E501

    The version of the OpenAPI document: 3.0.8
    Contact: heqiming@mvcapi.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from mvcapi-sdk.api_client import ApiClient, Endpoint
from mvcapi-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from mvcapi-sdk.model.contract_ft_address_tx import ContractFtAddressTx
from mvcapi-sdk.model.contract_ft_balance import ContractFtBalance
from mvcapi-sdk.model.contract_ft_utxo import ContractFtUtxo
from mvcapi-sdk.model.contract_nft_address_summary import ContractNftAddressSummary
from mvcapi-sdk.model.contract_nft_genesis_summary import ContractNftGenesisSummary
from mvcapi-sdk.model.contract_nft_sell_utxo import ContractNftSellUtxo
from mvcapi-sdk.model.contract_nft_utxo import ContractNftUtxo
from mvcapi-sdk.model.contract_unique_utxo import ContractUniqueUtxo
from mvcapi-sdk.model.error_response import ErrorResponse


class ContractApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __contract_ft_address_address_balance_confirmed_get(
            self,
            address,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get all contract token balances for specific address ignoring all unconfirmed txs.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_ft_address_address_balance_confirmed_get(address, code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address
                code_hash (str): Filter by contract code hash
                genesis (str): Filter by contract genesis

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                int
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_ft_address_address_balance_confirmed_get = Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/ft/address/{address}/balance/confirmed',
                'operation_id': 'contract_ft_address_address_balance_confirmed_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'required': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_ft_address_address_balance_confirmed_get
        )

        def __contract_ft_address_address_balance_get(
            self,
            address,
            **kwargs
        ):
            """Get all contract token balances for specific address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_ft_address_address_balance_get(address, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address

            Keyword Args:
                code_hash (str): Filter by contract code hash. [optional]
                genesis (str): Filter by contract genesis. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractFtBalance]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.contract_ft_address_address_balance_get = Endpoint(
            settings={
                'response_type': ([ContractFtBalance],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/ft/address/{address}/balance',
                'operation_id': 'contract_ft_address_address_balance_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'required': [
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_ft_address_address_balance_get
        )

        def __contract_ft_address_address_code_hash_genesis_tx_get(
            self,
            address,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get all contract token balances for specific address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_ft_address_address_code_hash_genesis_tx_get(address, code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address
                code_hash (str): Filter by contract code hash
                genesis (str): Filter by contract genesis

            Keyword Args:
                flag (str): The last id of the last query(Paging flag). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractFtAddressTx]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_ft_address_address_code_hash_genesis_tx_get = Endpoint(
            settings={
                'response_type': ([ContractFtAddressTx],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/ft/address/{address}/{codeHash}/{genesis}/tx',
                'operation_id': 'contract_ft_address_address_code_hash_genesis_tx_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                    'flag',
                ],
                'required': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'flag':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'flag': 'flag',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'path',
                    'genesis': 'path',
                    'flag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_ft_address_address_code_hash_genesis_tx_get
        )

        def __contract_ft_address_address_utxo_get(
            self,
            address,
            **kwargs
        ):
            """Get all contract token utxos for specific address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_ft_address_address_utxo_get(address, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address

            Keyword Args:
                code_hash (str): Filter by contract code hash. [optional]
                genesis (str): Filter by contract genesis. [optional]
                flag (str): The flag of the last query Item(Paging flag). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractFtUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.contract_ft_address_address_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractFtUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/ft/address/{address}/utxo',
                'operation_id': 'contract_ft_address_address_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                    'flag',
                ],
                'required': [
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'flag':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'flag': 'flag',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                    'flag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_ft_address_address_utxo_get
        )

        def __contract_nft_address_address_count_confirmed_get(
            self,
            address,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get confirmed utxo count for specific nft(ignore all unconfirmed txs).  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_address_address_count_confirmed_get(address, code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address
                code_hash (str): Filter by contract code hash
                genesis (str): Filter by contract genesis

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                int
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_nft_address_address_count_confirmed_get = Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/address/{address}/count/confirmed',
                'operation_id': 'contract_nft_address_address_count_confirmed_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'required': [
                    'address',
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_address_address_count_confirmed_get
        )

        def __contract_nft_address_address_summary_get(
            self,
            address,
            **kwargs
        ):
            """Get nft summary(NFT count group by genesis) for address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_address_address_summary_get(address, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftAddressSummary]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.contract_nft_address_address_summary_get = Endpoint(
            settings={
                'response_type': ([ContractNftAddressSummary],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/address/{address}/summary',
                'operation_id': 'contract_nft_address_address_summary_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                ],
                'required': [
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                },
                'location_map': {
                    'address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_address_address_summary_get
        )

        def __contract_nft_address_address_utxo_get(
            self,
            address,
            **kwargs
        ):
            """Get all contract nft token utxos for specific address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_address_address_utxo_get(address, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): the requested address

            Keyword Args:
                code_hash (str): Filter by contract code hash. [optional]
                genesis (str): Filter by contract genesis. [optional]
                limit (int): Limit the return count(no more than 300). [optional]
                flag (str): The flag of the last query Item(Paging flag). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.contract_nft_address_address_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractNftUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/address/{address}/utxo',
                'operation_id': 'contract_nft_address_address_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                    'limit',
                    'flag',
                ],
                'required': [
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'limit':
                        (int,),
                    'flag':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'limit': 'limit',
                    'flag': 'flag',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                    'limit': 'query',
                    'flag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_address_address_utxo_get
        )

        def __contract_nft_genesis_code_hash_genesis_summary_get(
            self,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_genesis_code_hash_genesis_summary_get(code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                code_hash (str): Code hash of the token.
                genesis (str): Contract genesis

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftGenesisSummary]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_nft_genesis_code_hash_genesis_summary_get = Endpoint(
            settings={
                'response_type': ([ContractNftGenesisSummary],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/genesis/{codeHash}/{genesis}/summary',
                'operation_id': 'contract_nft_genesis_code_hash_genesis_summary_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code_hash',
                    'genesis',
                ],
                'required': [
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                },
                'attribute_map': {
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                },
                'location_map': {
                    'code_hash': 'path',
                    'genesis': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_genesis_code_hash_genesis_summary_get
        )

        def __contract_nft_genesis_code_hash_genesis_utxo_get(
            self,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get all contract nft token utxos by codeHash and genesisId.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_genesis_code_hash_genesis_utxo_get(code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                code_hash (str): Code hash of the token.
                genesis (str): Contract genesis

            Keyword Args:
                token_index (int): Find exact token Index.. [optional]
                max (int): Token index not bigger than this(include this).. [optional]
                min (int): Token index not less than this(include this).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_nft_genesis_code_hash_genesis_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractNftUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/genesis/{codeHash}/{genesis}/utxo',
                'operation_id': 'contract_nft_genesis_code_hash_genesis_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code_hash',
                    'genesis',
                    'token_index',
                    'max',
                    'min',
                ],
                'required': [
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'token_index':
                        (int,),
                    'max':
                        (int,),
                    'min':
                        (int,),
                },
                'attribute_map': {
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'token_index': 'tokenIndex',
                    'max': 'max',
                    'min': 'min',
                },
                'location_map': {
                    'code_hash': 'path',
                    'genesis': 'path',
                    'token_index': 'query',
                    'max': 'query',
                    'min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_genesis_code_hash_genesis_utxo_get
        )

        def __contract_nft_sell_address_address_utxo_get(
            self,
            address,
            **kwargs
        ):
            """Get all contract sell sell utxos for specific address.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_sell_address_address_utxo_get(address, async_req=True)
            >>> result = thread.get()

            Args:
                address (str): Owner address.

            Keyword Args:
                code_hash (str): Filter by contract code hash. [optional]
                genesis (str): Filter by contract genesis. [optional]
                flag (str): The flag of the last query Item(Paging flag). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftSellUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address'] = \
                address
            return self.call_with_http_info(**kwargs)

        self.contract_nft_sell_address_address_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractNftSellUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/sell/address/{address}/utxo',
                'operation_id': 'contract_nft_sell_address_address_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'code_hash',
                    'genesis',
                    'flag',
                ],
                'required': [
                    'address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'flag':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'flag': 'flag',
                },
                'location_map': {
                    'address': 'path',
                    'code_hash': 'query',
                    'genesis': 'query',
                    'flag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_sell_address_address_utxo_get
        )

        def __contract_nft_sell_genesis_code_hash_genesis_utxo_get(
            self,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get all contract nft token utxos by codeHash and genesisId.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_nft_sell_genesis_code_hash_genesis_utxo_get(code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                code_hash (str): Code hash of the token.
                genesis (str): Contract genesis

            Keyword Args:
                token_index (int): Find exact token Index.. [optional]
                max (int): Token index not bigger than this(include this).. [optional]
                min (int): Token index not less than this(include this).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractNftSellUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_nft_sell_genesis_code_hash_genesis_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractNftSellUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/nft/sell/genesis/{codeHash}/{genesis}/utxo',
                'operation_id': 'contract_nft_sell_genesis_code_hash_genesis_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code_hash',
                    'genesis',
                    'token_index',
                    'max',
                    'min',
                ],
                'required': [
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                    'token_index':
                        (int,),
                    'max':
                        (int,),
                    'min':
                        (int,),
                },
                'attribute_map': {
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                    'token_index': 'tokenIndex',
                    'max': 'max',
                    'min': 'min',
                },
                'location_map': {
                    'code_hash': 'path',
                    'genesis': 'path',
                    'token_index': 'query',
                    'max': 'query',
                    'min': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_nft_sell_genesis_code_hash_genesis_utxo_get
        )

        def __contract_unique_genesis_code_hash_genesis_utxo_get(
            self,
            code_hash,
            genesis,
            **kwargs
        ):
            """Get contract unique utxos by codeHash and genesisId.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contract_unique_genesis_code_hash_genesis_utxo_get(code_hash, genesis, async_req=True)
            >>> result = thread.get()

            Args:
                code_hash (str): Code hash of the token.
                genesis (str): Contract genesis

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ContractUniqueUtxo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code_hash'] = \
                code_hash
            kwargs['genesis'] = \
                genesis
            return self.call_with_http_info(**kwargs)

        self.contract_unique_genesis_code_hash_genesis_utxo_get = Endpoint(
            settings={
                'response_type': ([ContractUniqueUtxo],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/contract/unique/genesis/{codeHash}/{genesis}/utxo',
                'operation_id': 'contract_unique_genesis_code_hash_genesis_utxo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code_hash',
                    'genesis',
                ],
                'required': [
                    'code_hash',
                    'genesis',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code_hash':
                        (str,),
                    'genesis':
                        (str,),
                },
                'attribute_map': {
                    'code_hash': 'codeHash',
                    'genesis': 'genesis',
                },
                'location_map': {
                    'code_hash': 'path',
                    'genesis': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__contract_unique_genesis_code_hash_genesis_utxo_get
        )
